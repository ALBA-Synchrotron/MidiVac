#    "$Name:  $";
#    "$Header: /siciliarep/CVS/tango_ds/Vacuum/VacuumController/MidiVac.py,v 1.7 2007/08/28 10:39:16 srubio Exp $";
#=============================================================================
#
# file :        MidiVac.py
#
# description : Python source for the MidiVac and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                MidiVac are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author: srubio $
#
# $Revision: 11150 $
#
# $Log: MidiVac.py,v $
# Revision 1.7  2007/08/28 10:39:16  srubio
# Vacuum Controller modified to access Gauges as independent Devices
#
# Revision 1.6  2007/07/09 09:50:16  sicilia
# Properties description changed ... Refresh now is double
#
# Revision 1.5  2007/07/09 08:57:47  sicilia
# *** empty log message ***
#
# Revision 1.4  2007/07/09 07:49:26  sicilia
# Last modifications to the MidiVac device
#
# Revision 1.3  2007/07/06 09:17:51  sicilia
# Modified the Vacuum Controller to manage write/read/custom commands in an ordered way
#
# Revision 1.2  2007/07/06 08:37:17  sicilia
# *** empty log message ***
#
# Revision 1.1.1.1  2007/04/17 09:08:24  srubio
# Vacuum Controller (Gauges, Ion Pump PS, ...)
#
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
from PyTango import DevState
import sys
import time

## @note Backward compatibility between PyTango3 and PyTango7
if 'PyDeviceClass' not in dir(PyTango): PyTango.PyDeviceClass = PyTango.DeviceClass
if 'PyUtil' not in dir(PyTango): PyTango.PyUtil = PyTango.Util

from VacuumController import *

#==================================================================
#   MidiVac Class Description:
#
#         <p>This device requires <a href="http://www.tango-controls.org/Documents/tools/fandango/fandango">Fandango module<a> to be available in the PYTHONPATH.</p>
#         <p>This Device will manage the Varian MidiVac Ion Pump
#         power supply through a SerialLine Tango Device Server.</p>
#         Last update: srubio@cells.es, 2007/09/20
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :       Device running normally
#   DevState.OFF :      Gauges switched off
#   DevState.UNKNOWN :  It was imposible to comunicate with the device
#   DevState.ALARM :    Error in some channel/module of the device
#==================================================================


class MidiVac(PyTango.Device_3Impl):
    """
    #         This Device will manage the Varian MidiVac Ion Pump power supply through a SerialLine Tango Device Server.
    #         Last update: srubio@cells.es, 2007/09/20
    """

#--------- Add you global variables here --------------------------
    
    def writeCommand(self, comm, argin):
        """ This method provides a generic function for executing write-only commands """
        try:
            self.SVD.addComm(argin,argin)
        except Exception, e:
            print str(e)
            self.set_status(str(self.get_status()))
            raise DevFailed, ('Exception in ',comm,'()')
        
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_3Impl.__init__(self,cl,name)
        MidiVac.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        
        try:
            if not self.Refresh: # or self.Refresh<1:
                print 'Refresh attribute does not exists!'
                self.Refresh=10
        except Exception, e:
            print str(e)
            self.Refresh=10
        print 'Refresh pause between connections set to ',self.Refresh,' seconds.'
        
        if len(self.SerialLine):
            from VacuumController import SerialVacuumDevice
            self.SVD=SerialVacuumDevice(self.SerialLine,self.Refresh)
            self.SVD.addComm('I')
            self.SVD.addComm('V')
            self.SVD.addComm('P?')
            self.SVD.addComm('Q?')
            self.SVD.addComm('H?')
            self.SVD.addComm('E')
            self.SVD.addComm('A?')
            self.SVD.addComm('S')
            self.SVD.addComm('K?')
            self.SVD.start() #self.SVD.updateThread.start()
        else:
            raise RuntimeError, str('SerialLine property requires a value!')
        
        print "Device Server ", self.get_name(), ' waiting for request.'
        self.ChannelState=[]
        for i in range(5): self.ChannelState.append('Unknown')
        
        self.set_state(DevState.ON)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"
        
        if self.SVD.init == False:
            self.set_state(DevState.INIT)
        elif self.SVD.errors>10:
            self.set_state(DevState.FAULT)
        else:
            self.set_state(DevState.ON)
        
        status = 'The Device is '+str(self.get_state())+'\n'    
        if len(self.SVD.lastrecv):
            status = status+'Last communication received at '+str(self.SVD.lasttime)+': "'+str(self.SVD.lastrecv)+'"\n'
        if self.SVD.errors:
            status = status+str(self.SVD.errors)+' communication errors\n'
        for i in range(len(self.ChannelState)):
            if self.ChannelState[i]!='Unknown':
                status = status+'P'+str(i+1)+' State is \''+str(self.ChannelState[i])+'\'' 
                status = status+'; last value readed is \''+str(self.PressureValues[i])+'\''
                status = status+'\n'
        self.set_status(status)
#==================================================================
#
#    MidiVac read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read I attribute
#------------------------------------------------------------------
    def read_I(self, attr):
        print "In ", self.get_name(), "::read_I()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('I')
            attr_I_read = getExpNumbers(result)[0]#float(result)
            print 'attr_I_read='+str(attr_I_read)
            attr.set_value(attr_I_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_I_read = -1.0
            #attr.set_value(attr_I_read)


#------------------------------------------------------------------
#    Read V attribute
#------------------------------------------------------------------
    def read_V(self, attr):
        print "In ", self.get_name(), "::read_V()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('V')
            attr_V_read = getExpNumbers(result)[0]#float(result)
            attr.set_value(attr_V_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_V_read = -1.0
            #attr.set_value(attr_V_read)


#------------------------------------------------------------------
#    Read SetPoint1 attribute
#------------------------------------------------------------------
    def read_SetPoint1(self, attr):
        print "In ", self.get_name(), "::read_SetPoint1()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('P?')
            attr_SetPoint1_read = getExpNumbers(result)[0]#float(result)
            attr.set_value(attr_SetPoint1_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_SetPoint1_read = -1.0
            #attr.set_value(attr_SetPoint1_read)


#------------------------------------------------------------------
#    Read SetPoint2 attribute
#------------------------------------------------------------------
    def read_SetPoint2(self, attr):
        print "In ", self.get_name(), "::read_SetPoint2()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('Q?')
            attr_SetPoint2_read = getExpNumbers(result)[0]#float(result)
            attr.set_value(attr_SetPoint2_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            #attr_SetPoint2_read = -1.0
            #attr.set_value(attr_SetPoint2_read)


#------------------------------------------------------------------
#    Read OutputSetting attribute
#------------------------------------------------------------------
    def read_OutputSetting(self, attr):
        print "In ", self.get_name(), "::read_OutputSetting()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('H?')
            attr_OutputSetting_read = getExpNumbers(result)[0]#float(result)
            attr.set_value(attr_OutputSetting_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_OutputSetting_read = -1.0
            #attr.set_value(attr_OutputSetting_read)


#------------------------------------------------------------------
#    Read FirmwareVersion attribute
#------------------------------------------------------------------
    def read_FirmwareVersion(self, attr):
        print "In ", self.get_name(), "::read_FirmwareVersion()"
        
        #    Add your own code here
        try:                    
            attr_FirmwareVersion_read = self.SVD.getComm('E')
            attr.set_value(attr_FirmwareVersion_read)
        except DevFailed, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_FirmwareVersion_read = 'UNKNOWN'
            #attr.set_value(attr_FirmwareVersion_read)


#------------------------------------------------------------------
#    Read HVStatus attribute
#------------------------------------------------------------------
    def read_HVStatus(self, attr):
        print "In ", self.get_name(), "::read_HVStatus()"
        
        #    Add your own code here
        HVstatus = {    '0':'HV off',\
                    '0!':'HV off',\
                    '1':'HV on in start mode',\
                    '3':'HV on in protect mode',\
                    '-1':'HV off for Over current error',\
                    '-2':'HV off for Protect error',\
                    '-3':'HV off for HV Fault error',\
                    '-4':'HV off for Interlock error',\
                    '-5':'HV off for HV Cable Fault error'\
                    }
        try:
            result=self.SVD.getComm('A?')
            attr_HVStatus_read = HVstatus[result]
            self.set_status('\nThe HVStatus is '+attr_HVStatus_read)
            attr.set_value(attr_HVStatus_read)
        except Exception, e:
            print 'Exception while reading HVStatus: '+str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_HVStatus_read = 'UNKNOWN'
            #attr.set_value(attr_HVStatus_read)


#------------------------------------------------------------------
#    Read SetPointStatus attribute
#------------------------------------------------------------------
    def read_SetPointStatus(self, attr):
        print "In ", self.get_name(), "::read_SetPointStatus()"
        
        #    Add your own code here
        try:                    
            attr_SetPointStatus_read = int(self.SVD.getComm('S'))
            attr.set_value(attr_SetPointStatus_read)
        except DevFailed, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            #attr_SetPointStatus_read = -1
            #attr.set_value(attr_SetPointStatus_read)


#------------------------------------------------------------------
#    Read PROTECTCurrentValue attribute
#------------------------------------------------------------------
    def read_PROTECTCurrentValue(self, attr):
        print "In ", self.get_name(), "::read_PROTECTCurrentValue()"
        
        #    Add your own code here
        try:
            result=self.SVD.getComm('K?')
            attr_PROTECTCurrentValue_read = getExpNumbers(result)[0]#float(result)
            attr.set_value(attr_PROTECTCurrentValue_read)
        except Exception, e:
            print str(e)
            self.set_status('\nLast exception: '+str(e))
            raise Exception('MidiVac.read_X()=%s'%result)
            #attr_PROTECTCurrentValue_read = -1.0
            #attr.set_value(attr_PROTECTCurrentValue_read)


#------------------------------------------------------------------
#    Write PROTECTCurrentValue attribute
#------------------------------------------------------------------
    def write_PROTECTCurrentValue(self, attr):
        print "In ", self.get_name(), "::write_PROTECTCurrentValue()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here



#==================================================================
#
#    MidiVac command methods
#
#==================================================================

#------------------------------------------------------------------
#    SendCommand command:
#
#    Description: Sends a command directly to the device through the rs232 line
#                
#    argin:  DevString    Command to send (literally)
#    argout: DevString    Answer received (literally)
#------------------------------------------------------------------
    def SendCommand(self, argin):
        print "In ", self.get_name(), "::SendCommand()"
        #    Add your own code here
        try:
            self.SVD.stop()
            result=self.SVD.serialComm(argin)
            self.SVD.start()
            argout=result
        except Exception, e:
            print str(e)
            self.set_status(str(self.get_status()))
            raise DevFailed, 'Exception in sendCommand()'
        return argout


#------------------------------------------------------------------
#    On command:
#
#    Description: 
#------------------------------------------------------------------
    def On(self):
        print "In ", self.get_name(), "::On()"
        #    Add your own code here
        argin='A1'
        self.writeCommand('On',argin)
        #try:
            #self.SVD.addComm(argin,True)
            ##result=self.SVD.serialComm(argin)
            ##argout=result
        #except Exception, e:
            #print str(e)
            #self.set_status(self.get_status())
            #raise DevFailed, 'Exception in sendCommand()'
        ##return argout


#------------------------------------------------------------------
#    Off command:
#
#    Description: 
#------------------------------------------------------------------
    def Off(self):
        print "In ", self.get_name(), "::Off()"
        #    Add your own code here
        argin='A0'
        self.writeCommand('Off',argin)


#------------------------------------------------------------------
#    Start command:
#
#    Description: 
#------------------------------------------------------------------
    def Start(self):
        print "In ", self.get_name(), "::Start()"
        #    Add your own code here
        argin='C0'
        self.writeCommand('Start',argin)


#------------------------------------------------------------------
#    Protect command:
#
#    Description: 
#------------------------------------------------------------------
    def Protect(self):
        print "In ", self.get_name(), "::Protect()"
        #    Add your own code here
        argin='C1'
        self.writeCommand('Protect',argin)


#------------------------------------------------------------------
#    Set3KV command:
#
#    Description: 
#------------------------------------------------------------------
    def Set3KV(self):
        print "In ", self.get_name(), "::Set3KV()"
        #    Add your own code here
        argin='H3'
        self.writeCommand('Set3KV',argin)


#------------------------------------------------------------------
#    Set5KV command:
#
#    Description: 
#------------------------------------------------------------------
    def Set5KV(self):
        print "In ", self.get_name(), "::Set5KV()"
        #    Add your own code here
        argin='H5'
        self.writeCommand('Set5KV',argin)


#------------------------------------------------------------------
#    Set7KV command:
#
#    Description: 
#------------------------------------------------------------------
    def Set7KV(self):
        print "In ", self.get_name(), "::Set7KV()"
        #    Add your own code here
        argin='H7'
        self.writeCommand('Set7KV',argin)


#==================================================================
#
#    MidiVacClass class definition
#
#==================================================================
class MidiVacClass(PyTango.PyDeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SerialLine':
            [PyTango.DevString,
            "SerialLine Device Server to connect with",
            [] ],
        'NChannels':
            [PyTango.DevLong,
            "Number of Pressure Channels available",
            [ 5 ] ],
        'NCombChannels':
            [PyTango.DevLong,
            "Number of Combination Channels available",
            [ 2 ] ],
        'Refresh':
            [PyTango.DevDouble,
            "Period (in seconds) for the internal refresh thread.",
            [ 1 ] ],
        }


    #    Command definitions
    cmd_list = {
        'SendCommand':
            [[PyTango.DevString, "Command to send (literally)"],
            [PyTango.DevString, "Answer received (literally)"]],
        'On':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Off':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Protect':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Set3KV':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Set5KV':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Set7KV':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'I':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"A?",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'V':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"KV",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'SetPoint1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'SetPoint2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'OutputSetting':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'FirmwareVersion':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'HVStatus':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'SetPointStatus':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ]],
        'PROTECTCurrentValue':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


#------------------------------------------------------------------
#    MidiVacClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.PyDeviceClass.__init__(self, name)
        self.set_type(name);
        print "In MidiVacClass  constructor"

#==================================================================
#
#    MidiVac class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.PyUtil(sys.argv)
        py.add_TgClass(MidiVacClass,MidiVac,'MidiVac')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
